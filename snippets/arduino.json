{
    "gettemperature": {
        "prefix": "iot-gettemperature",
        "body": [
            "#include \"HTS221Sensor.h\"",
            "",
            "DevI2C *i2c;",
            "HTS221Sensor *sensor;",
            "",
            "void initSensor()",
            "{",
            "    i2c = new DevI2C(D14, D15);",
            "    sensor = new HTS221Sensor(*i2c);",
            "    sensor->init(NULL);",
            "}",
            "",
            "float readTemperature()",
            "{",
            "    sensor->reset();",
            "    float temperature = 0;",
            "    sensor->getTemperature(&temperature);",
            "    return temperature;",
            "}"
        ],
        "description": "Functions to get temperature data"
    },
    "initwifi": {
        "prefix": "iot-initwifi",
        "body": [
            "#include \"AZ3166WiFi.h\"",
            "\t$0",
            "bool initWifi()",
            "{",
            "    if (WiFi.begin() == WL_CONNECTED)",
            "    {",
            "        IPAddress ip = WiFi.localIP();",
            "        return true;",
            "    }",
            "    else",
            "    {",
            "        return false;",
            "    }",
            "}"
        ],
        "description": "Functions to init WiFi"
    },
    "initMqttClient": {
        "prefix": "iot-initmqtt",
        "body": [
            "//Please include the following header file",
            "//#include \"DevKitMQTTClient.h\"",
            "",
            "DevKitMQTTClient_Init(${0:true});",
            "//DevKitMQTTClient_SetSendConfirmationCallback(SendConfirmationCallback);",
            "//DevKitMQTTClient_SetMessageCallback(MessageCallback);",
            "//DevKitMQTTClient_SetDeviceTwinCallback(DeviceTwinCallback);",
            "//DevKitMQTTClient_SetDeviceMethodCallback(DeviceMethodCallback);"
        ],
        "description": "Initialize Mqtt client"
    },
    "mqttSendData": {
        "prefix": "iot-sendmqtt",
        "body": [
            "char ${2:payLoad}[${1:128}];",
            "",
            "//Replace the following line with the actual event data",
            "//snprintf(${2:payLoad}, ${1:128}, \"{YOUR DATA}\");",
            "EVENT_INSTANCE* ${3:message} = DevKitMQTTClient_Event_Generate(${2:payLoad}, ${4|MESSAGE,STATE|});",
            "DevKitMQTTClient_Event_AddProp(${3:message}, ${5:propertyName} /*name of the user property for MQTT event*/,",
            "   ${6:propertyValue} /*value of the user property*/);",
            "DevKitMQTTClient_SendEventInstance(${3:message});"
        ],
        "description": "Send Mqtt data to IoTHub"
    },
    "recordAudio": {
        "prefix": "iot-recordaudio",
        "body": [
            "//Please include the following header file",
            "//#include \"AudioClassV2.h\"",
            "",
            "static AudioClass& Audio = AudioClass::getInstance();",
            "const char ${1:readBuffer}[AUDIO_CHUNK_SIZE];",
            "",
            "void recordCallback(void)",
            "{",
            "    int length = Audio.readFromRecordBuffer(${1:readBuffer}, AUDIO_CHUNK_SIZE);",
            "    // Do work with the recorded data in ${1:readBuffer}iot",
            "}",
            "",
            "void record()",
            "{",
            "    Audio.format(8000, 16);",
            "    Audio.startRecord(recordCallback);",
            "}"
        ],
        "description": "Record audio from on-board microphone"
    },
    "playAudio": {
        "prefix": "iot-playaudio",
        "body": [
            "//Please include the following header file",
            "//#include \"AudioClassV2.h\"",
            "",
            "const int ${1:bufferLength} = AUDIO_CHUNK_SIZE * 10;",
            "const char ${2:audioBuffer}[${1:bufferLength}];",
            "",
            "void playCallback(void)",
            "{",
            "   Audio.writeToPlayBuffer(${2:audioBuffer}, AUDIO_CHUNK_SIZE);",
            "}",
            "",
            "void play()",
            "{",
            "   Audio.format(8000, 16);",
            "   Audio.startPlay(playCallback);",
            "}"
        ],
        "description": "Play audio via on-board headphone interface"
    },
    "screen": {
        "prefix": "iot-screen",
        "body": [
            "#include \"Arduino.h\";",
            "#include \"OledDisplay.h\";",
            "",
            "/* Generated by pixelcraft.cc */",
            "static const unsigned char img[] = {",
            "/* Row 0 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 1 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 2 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x80,0x80,0xc0,0xe0,0xe0, 0xe0,0xf0,0xf0,0xf0,0xf0,0x70,0xf8,0xf8,",
            "0xf8,0xf0,0xf0,0xf0,0xf0,0xf0,0xe0,0xe0, 0xe0,0xc0,0x80,0x80,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 3 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0xc0,0xe0,0xf8,",
            "0xfc,0xbe,0x1f,0x0f,0x07,0x03,0x01,0x01, 0x01,0x00,0x00,0x01,0x01,0x01,0x18,0x18,",
            "0x3d,0x3c,0xff,0x3f,0x07,0x07,0x0f,0x1f, 0x0f,0x3f,0x3f,0x7f,0xff,0xfe,0xfc,0xf8,",
            "0xf0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 4 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,",
            "0xff,0xff,0xff,0xc0,0x80,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0xe0,0xf0,0xf8,0xf8, 0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,0xff,",
            "0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 5 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x0f,0x7f,0xff,0xff,0xff,",
            "0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0xf8, 0xf8,0xe0,0xc0,0x80,0x80,0xbc,0x3e,0x1e,",
            "0x7e,0x7c,0xf9,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",
            "0xff,0xff,0xff,0x1f,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 6 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x01,0x07,0x0f,",
            "0x3f,0x7f,0xff,0xff,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,",
            "0xfe,0xfc,0xbb,0x13,0x03,0x01,0x01,0x83, 0x83,0xc3,0xe7,0xf7,0xff,0x7f,0x3f,0x1f,",
            "0x07,0x03,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "/* Row 7 */",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x01,0x03,0x03,0x07, 0x07,0x07,0x0f,0x0f,0x0f,0x0f,0x1f,0x1f,",
            "0x1f,0x0f,0x0e,0x0e,0x0f,0x07,0x07,0x07, 0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,",
            "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};",
            "",
            "Screen.clean();",
            "Screen.draw(0, 0, 128, 8, (unsigned char*)img);",
            "Screen.print(\"Hello World!\\r\\n\");"
        ],
        "description": "Show image and text on screen"
    }
}